# -*- coding: utf-8 -*-
"""Disease_Prediction_from_symptoms.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w5kyT6EV0CQ7ahzDw5VSX0zC4Vrvwb6D

##Importing Modules
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import warnings 
warnings.filterwarnings("ignore")

"""##Loading the dataset"""

df = pd.read_csv('https://raw.githubusercontent.com/SterlinPeter/BE_Project/master/dataset/dataset.csv').dropna(axis=1)

"""##Getting dataset information"""

df.head()

df.info()

disease_counts = df["prognosis"].value_counts()
print(disease_counts)

"""##Encoding string objects"""

le = LabelEncoder()
le.fit(df['prognosis'])
df['encoded_prognosis'] = le.transform(df['prognosis'])

"""##Splitting data into training and testing data"""

X = df.iloc[:, :-2]
y = df.iloc[:, -1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 2529)

"""##Training Naive Bayes model with metrics"""

nbmodel = GaussianNB()
nbmodel.fit(X_train, y_train)
nbpreds = nbmodel.predict(X_test)

print("Gausssian NB Accuracy score: ", accuracy_score(y_test, nbpreds))
confmatrix = confusion_matrix(y_test, nbpreds)
plt.figure(figsize=(14,12))
sns.set(font_scale=1.4)
sns.heatmap(confmatrix, annot=True, annot_kws={"size": 16}, cmap="Blues")
plt.title("Gaussian NB Confusion Matrix")
plt.show()

"""##Training Random Forest Classifier with metrics"""

rfc = RandomForestClassifier()
rfc.fit(X_train, y_train)
rfcpreds = rfc.predict(X_test)

print("Random Forest Classifier Accuracy score: ", accuracy_score(y_test, rfcpreds))
conf_matrix = confusion_matrix(y_test, rfcpreds)
plt.figure(figsize=(14,12))
sns.set(font_scale=1.4)
sns.heatmap(conf_matrix, annot=True, annot_kws={"size": 16}, cmap="Blues")
plt.title("Random Forest Classifier Confusion Matrix")
plt.show()

"""##Creating a function to convert data into appropriate format for model for prediction"""

e_classes = le.classes_
symptoms_dict = {}
for index, symptom in enumerate(X.columns.values):
  symptoms_dict[symptom] = index

def predictDisease(symptoms):
  labelled_data = [0 for _ in range(len(symptoms_dict))]
  symptoms = symptoms.split(',')
  for symptom in symptoms:
    symptom = '_'.join(symptom.lower().split())
    labelled_data[symptoms_dict[symptom]] = 1

  labelled_data = np.array(labelled_data).reshape(1,-1)

  gnb_pred = e_classes[nbmodel.predict(labelled_data)[0]]
  rfc_pred = e_classes[rfc.predict(labelled_data)[0]]
  print("Disease by Naive Bayes: ", gnb_pred)
  print("Disease by Random Forest: ", rfc_pred)

predictDisease("Itching,Skin Rash,Nodal Skin Eruptions")
predictDisease("Acidity,Indigestion,Headache,stiff neck,depression,irritability,blurred and distorted vision,excessive hunger,visual disturbances")